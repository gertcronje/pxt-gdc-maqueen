<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="t@-$m`W*~mi?frg:^iFy" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="H`]Q|dvT)s7:ic^g+#xz"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace gdcMaqueen {" line1="" line2="    enum motorState {" line3="        STOP = 0," line4="        FORWARD = 1," line5="        BACKWARD = 2," line6="        LEFT = 3," line7="        RIGHT = 4," line8="        FOLLOW = 5" line9="    }" line10="" line11="    enum followDir {" line12="        STRAIGHT = 0," line13="        LEFT = 1," line14="        RIGHT = 2" line15="    }" line16="" line17="    let stop_count = 0" line18="    let motor_speed = 0" line19="    let motor_calib = 0" line20="    let motor_state = motorState.STOP" line21="    let r_speed = 0" line22="    let l_speed = 0" line23="    let l_count = 0" line24="    let r_count = 0" line25="    let follow_ctrl = 0" line26="    let motor_ctrl = 0" line27="    let last_follow_dir = followDir.STRAIGHT" line28="" line29="    follow_ctrl = 50" line30="    motor_ctrl = 20" line31="    motor_calib = 10" line32="" line33="    //% block=&quot;set follow control $value&quot;" line34="    export function set_follow_control(value: number) {" line35="        follow_ctrl = value" line36="    }" line37="" line38="    //% block=&quot;set motor control $value&quot;" line39="    export function set_motor_control(value: number) {" line40="        motor_ctrl = value" line41="    }" line42="" line43="    //% block=&quot;set motor calibration $value&quot;" line44="    export function set_motor_calibration(value: number) {" line45="        motor_calib = value" line46="    }" line47="" line48="    //% block=&quot;get motor state&quot;" line49="    export function get_motor_state(): motorState {" line50="        return motor_state;" line51="    }" line52="" line53="    //% block=&quot;get motor $motor counter&quot;" line54="    export function get_motor_count(motor: maqueen.Motors) {" line55="        if (motor == maqueen.Motors.M1)" line56="            return l_count;" line57="        else if(motor == maqueen.Motors.M2)" line58="            return r_count;" line59="        else" line60="            return 0 " line61="    }" line62="" line63="    //% block=&quot;open claw&quot;" line64="    export function open_claw() {" line65="        maqueen.servoRun(maqueen.Servos.S1, 60)" line66="    }" line67="" line68="    //% block=&quot;close claw&quot;" line69="    export function close_claw() {" line70="        maqueen.servoRun(maqueen.Servos.S1, 10)" line71="    }" line72="" line73="    //% block=&quot;move backward at $speed for $rotations rotations&quot;" line74="    //% speed.defl=200" line75="    //% rotations.defl=1" line76="    export function backward(speed: number, rotations: number) {" line77="        r_count = 0" line78="        l_count = 0" line79="        l_speed = speed" line80="        r_speed = speed" line81="        motor_state = motorState.BACKWARD" line82="        motor_speed = speed" line83="        stop_count = rotations * 24" line84="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, l_speed)" line85="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, r_speed + motor_calib)" line86="    }" line87="" line88="    // Monitor right motor encoder" line89="    pins.onPulsed(DigitalPin.P1, PulseValue.High, function () {" line90="        if (motor_state &gt; motorState.STOP) {" line91="            r_count += 1" line92="        }" line93="    })" line94="" line95="    // Monitor left motor encoder" line96="    pins.onPulsed(DigitalPin.P0, PulseValue.High, function () {" line97="        if (motor_state &gt; motorState.STOP) {" line98="            l_count += 1" line99="        }" line100="    })" line101="" line102="    //% block=&quot;wait movement done&quot;" line103="    export function wait_movement_done() {" line104="        while (motor_state &gt; motorState.STOP) {" line105="            basic.pause(100)" line106="        }" line107="    }" line108="" line109="    //% block=&quot;turn left at $speed for $rotations rotations&quot;" line110="    //% speed.defl=50" line111="    //% rotations.defl=1" line112="    export function turn_left(speed: number, rotations: number) {" line113="        r_count = 0" line114="        l_count = 0" line115="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, speed)" line116="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed + motor_calib)" line117="        stop_count = rotations * 24" line118="        motor_state = motorState.LEFT" line119="    }" line120="" line121="    //% block=&quot;move forward at $speed for $rotations rotations&quot;" line122="    //% speed.defl=200" line123="    //% rotations.defl=1" line124="    export function forward(speed: number, rotations: number) {" line125="        r_count = 0" line126="        l_count = 0" line127="        l_speed = speed" line128="        r_speed = speed" line129="        motor_state = motorState.FORWARD" line130="        motor_speed = speed" line131="        stop_count = rotations * 24" line132="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, l_speed)" line133="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, r_speed + motor_calib)" line134="    }" line135="" line136="    //% block=&quot;turn right at $speed for $rotations rotations&quot;" line137="    //% speed.defl=50" line138="    //% rotations.defl=1" line139="    export function turn_right(speed: number, rotations: number) {" line140="        r_count = 0" line141="        l_count = 0" line142="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed)" line143="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, speed + motor_calib)" line144="        stop_count = rotations * 24" line145="        motor_state = motorState.RIGHT" line146="    }" line147="" line148="    //% block=&quot;follow line at $speed for $rotations&quot;" line149="    //% speed.defl=200" line150="    //% rotations.defl=10" line151="    export function follow_line(speed: number, rotations: number) {" line152="        r_count = 0" line153="        l_count = 0" line154="        motor_state = motorState.FOLLOW" line155="        motor_speed = speed" line156="        l_speed = speed" line157="        r_speed = speed" line158="        stop_count = rotations * 24" line159="" line160="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, l_speed)" line161="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, r_speed + motor_calib)" line162="    }" line163="" line164="    function stop_count_reached(motor: maqueen.Motors) {" line165="        if (motor == maqueen.Motors.M1)" line166="            return l_count &gt;= stop_count;" line167="        else if (motor == maqueen.Motors.M2)" line168="            return r_count &gt;= stop_count;" line169="        else" line170="            return (l_count &gt;= stop_count) &amp;&amp; (r_count &gt;= stop_count)" line171="    }" line172="" line173="    // background task to monitor and contrl motor movement" line174="    basic.forever(function () {" line175="        if (motor_state &gt; motorState.STOP &amp;&amp; motor_state &lt; motorState.LEFT) {" line176="            if (l_count &gt; r_count) {" line177="                r_speed = motor_speed" line178="                l_speed = 0" line179="                basic.showLeds(`" line180="    . . # . ." line181="    . . . # ." line182="    # # # # #" line183="    . . . # ." line184="    . . # . ." line185="    `)" line186="" line187="            } else if (l_count &lt; r_count) {" line188="                r_speed = 0" line189="                l_speed = motor_speed" line190="                basic.showLeds(`" line191="    . . # . ." line192="    . # . . ." line193="    # # # # #" line194="    . # . . ." line195="    . . # . ." line196="    `)" line197="                } else {" line198="                r_speed = motor_speed" line199="                l_speed = motor_speed" line200="                basic.showLeds(`" line201="    . . # . ." line202="    . # . # ." line203="    # . . . #" line204="    . # . # ." line205="    . . # . ." line206="    `)" line207="            }" line208="" line209="            if (stop_count_reached(maqueen.Motors.All)) {" line210="                motor_state = motorState.STOP" line211="                motor_speed = 0" line212="                maqueen.motorStop(maqueen.Motors.All)" line213="            } else {" line214="                if (motor_state == motorState.FORWARD) {" line215="                    maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, l_speed)" line216="                    maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, r_speed + motor_calib)" line217="                } else if (motor_state == motorState.BACKWARD) {" line218="                    maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, l_speed)" line219="                    maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, r_speed + motor_calib)" line220="                }" line221="            }" line222="        } else if (motor_state == motorState.LEFT || motor_state == motorState.RIGHT) {" line223="            if (stop_count_reached(maqueen.Motors.M1)) {" line224="                maqueen.motorStop(maqueen.Motors.M1)" line225="            }" line226="            if (stop_count_reached(maqueen.Motors.M2)) {" line227="                maqueen.motorStop(maqueen.Motors.M2)" line228="            }" line229="            if (stop_count_reached(maqueen.Motors.All)) {" line230="                motor_state = motorState.STOP" line231="            }" line232="        } else if (motor_state == motorState.FOLLOW) {" line233="            let l = maqueen.readPatrol(maqueen.Patrol.PatrolLeft)" line234="            let r = maqueen.readPatrol(maqueen.Patrol.PatrolRight)" line235="" line236="            // both on the line" line237="            if ((l == 1) &amp;&amp; (r == 1)) {" line238="                l_speed = motor_speed" line239="                r_speed = motor_speed" line240="                last_follow_dir = followDir.STRAIGHT" line241="            } else if ((l == 1) &amp;&amp; (r == 0)) { // only left on the line - turn left" line242="                l_speed = motor_speed - follow_ctrl" line243="                r_speed = motor_speed" line244="                last_follow_dir = followDir.LEFT" line245="            } else if ((l == 0) &amp;&amp; (r == 1)) { // only right on the line - turn right" line246="                l_speed = motor_speed" line247="                r_speed = motor_speed - follow_ctrl" line248="                last_follow_dir = followDir.RIGHT" line249="            } else { // both off the line -- turn opposite from last direction" line250="                if (last_follow_dir == followDir.LEFT) {" line251="                    l_speed = motor_speed" line252="                    r_speed = motor_speed - follow_ctrl" line253="                } else if (last_follow_dir == followDir.RIGHT) {" line254="                    l_speed = motor_speed - follow_ctrl" line255="                    r_speed = motor_speed" line256="                }" line257="            }" line258="            // set motor speed" line259="            maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, l_speed)" line260="            maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, r_speed + motor_calib)" line261="" line262="            if (stop_count_reached(maqueen.Motors.All)) {" line263="                maqueen.motorStop(maqueen.Motors.All)" line264="                motor_state = motorState.STOP" line265="            }" line266="        } else {" line267="            basic.pause(100)" line268="        }" line269="    })" line270="}" numlines="271"></mutation></block></statement></block></xml>