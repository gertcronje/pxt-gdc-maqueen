<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="8K+do{GCDXe*A+iCU|Ca" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="U%U}vYW^7eToGw@{^LQb"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace gdcMaqueen {" line1="" line2="    enum motorState {" line3="        STOP = 0," line4="        FORWARD = 1," line5="        BACKWARD = 2," line6="        LEFT = 3," line7="        RIGHT = 4," line8="        FOLLOW = 5" line9="    }" line10="" line11="    let stop_count = 0" line12="    let motor_speed = 0" line13="    let motor_state = motorState.STOP" line14="    let r_speed = 0" line15="    let l_speed = 0" line16="    let l_count = 0" line17="    let r_count = 0" line18="    let follow_ctrl = 0" line19="    follow_ctrl = 50" line20="" line21="    //% block=&quot;set follow control $value&quot;" line22="    export function set_follow_control(value: number) {" line23="        follow_ctrl = value" line24="    }" line25="" line26="    //% block=&quot;get motor state&quot;" line27="    export function get_motor_state(): motorState {" line28="        return motor_state;" line29="    }" line30="" line31="    //% block=&quot;get motor $motor counter&quot;" line32="    export function get_motor_count(motor: maqueen.Motors) {" line33="        if(motor = maqueen.Motors.M1)" line34="            return l_count;" line35="        else " line36="            return r_count;" line37="    }" line38="    " line39="    //% block=&quot;open claw&quot;" line40="    export function open_claw() {" line41="        maqueen.servoRun(maqueen.Servos.S1, 60)" line42="    }" line43="    " line44="    //% block=&quot;close claw&quot;" line45="    export function close_claw() {" line46="        maqueen.servoRun(maqueen.Servos.S1, 10)" line47="    }" line48="" line49="    //% block=&quot;move backward at $speed for $rotations rotations&quot;" line50="    //% speed.defl=200" line51="    //% rotations.defl=1" line52="    export function backward(speed: number, rotations: number) {" line53="        r_count = 0" line54="        l_count = 0" line55="        l_speed = speed" line56="        r_speed = speed" line57="        motor_state = motorState.BACKWARD" line58="        motor_speed = speed" line59="        stop_count = rotations * 24" line60="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, speed)" line61="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, speed)" line62="    }" line63="" line64="    // Monitor right motor encoder" line65="    pins.onPulsed(DigitalPin.P1, PulseValue.High, function () {" line66="        if (motor_state &gt; motorState.STOP) {" line67="            r_count += 1" line68="        }" line69="    })" line70="" line71="    // Monitor left motor encoder" line72="    pins.onPulsed(DigitalPin.P0, PulseValue.High, function () {" line73="        if (motor_state &gt; motorState.STOP) {" line74="            l_count += 1" line75="        }" line76="    })" line77="" line78="    //% block=&quot;wait movement done&quot;" line79="    export function wait_movement_done() {" line80="        while (motor_state &gt; motorState.STOP) {" line81="            basic.pause(100)" line82="        }" line83="    }" line84="    " line85="    //% block=&quot;turn left at $speed for $rotations rotations&quot;" line86="    //% speed.defl=50" line87="    //% rotations.defl=1" line88="    export function turn_left(speed: number, rotations: number) {" line89="        r_count = 0" line90="        l_count = 0" line91="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, speed)" line92="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed)" line93="        stop_count = rotations * 24" line94="        motor_state = motorState.LEFT" line95="    }" line96="" line97="    //% block=&quot;move forward at $speed for $rotations rotations&quot;" line98="    //% speed.defl=200" line99="    //% rotations.defl=1" line100="    export function forward(speed: number, rotations: number) {" line101="        r_count = 0" line102="        l_count = 0" line103="        l_speed = speed" line104="        r_speed = speed" line105="        motor_state = motorState.FORWARD" line106="        motor_speed = speed" line107="        stop_count = rotations * 24" line108="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed)" line109="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed)" line110="    }" line111="" line112="    //% block=&quot;turn right at $speed for $rotations rotations&quot;" line113="    //% speed.defl=50" line114="    //% rotations.defl=1" line115="    function turn_right(speed: number, rotations: number) {" line116="        r_count = 0" line117="        l_count = 0" line118="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed)" line119="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, speed)" line120="        stop_count = rotations * 24" line121="        motor_state = motorState.RIGHT" line122="    }" line123="" line124="    //% block=&quot;follow line at $speed for $rotations&quot;" line125="    //% speed.defl=200" line126="    //% rotations.defl=10" line127="    function follow_line(speed: number, rotations: number) {" line128="        r_count = 0" line129="        l_count = 0" line130="        motor_state = motorState.FOLLOW" line131="        motor_speed = speed" line132="        l_speed = speed" line133="        r_speed = speed" line134="        stop_count = rotations * 24" line135="" line136="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed)" line137="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed)" line138="    }" line139="" line140="    function stop_count_reached(motor: maqueen.Motors) {" line141="        if(motor == maqueen.Motors.M1) " line142="            return l_count &gt;= stop_count;" line143="        else if(motor == maqueen.Motors.M2)" line144="            return r_count &gt;= stop_count;" line145="        else " line146="            return (l_count &gt;= stop_count) &amp;&amp; (r_count &gt;= stop_count)" line147="    }" line148="" line149="    // background task to monitor and contrl motor movement" line150="    basic.forever(function () {" line151="        if (motor_state &gt; motorState.STOP &amp;&amp; motor_state &lt; motorState.LEFT) {" line152="            if (l_count &gt; r_count + 10) {" line153="                r_speed += 1" line154="                l_speed += -1" line155="                if (l_speed &lt; motor_speed - 20) {" line156="                    l_speed = motor_speed - 20" line157="                }" line158="                if (r_speed &gt; motor_speed + 20) {" line159="                    r_speed = motor_speed + 20" line160="                }" line161="            } else if (l_count &lt; r_count - 10) {" line162="                r_speed += -1" line163="                l_speed += 1" line164="                if (l_speed &gt; motor_speed + 20) {" line165="                    l_speed = motor_speed + 20" line166="                }" line167="                if (r_speed &lt; motor_speed - 20) {" line168="                    r_speed = motor_speed + 20" line169="                }" line170="            }" line171="            if (stop_count_reached(maqueen.Motors.All)) {" line172="                motor_state = motorState.STOP" line173="                motor_speed = 0" line174="                maqueen.motorStop(maqueen.Motors.All)" line175="            } else {" line176="                if (motor_state == motorState.FORWARD) {" line177="                    maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, l_speed)" line178="                    maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, r_speed)" line179="                } else if (motor_state == motorState.BACKWARD) {" line180="                    maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, l_speed)" line181="                    maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, r_speed)" line182="                }" line183="            }" line184="        } else if (motor_state == motorState.LEFT || motor_state == motorState.RIGHT) {" line185="            if (stop_count_reached(maqueen.Motors.M1)) {" line186="                maqueen.motorStop(maqueen.Motors.M1)" line187="            }" line188="            if (stop_count_reached(maqueen.Motors.M2)) {" line189="                maqueen.motorStop(maqueen.Motors.M2)" line190="            }" line191="            if (stop_count_reached(maqueen.Motors.All)) {" line192="                motor_state = motorState.STOP" line193="            }" line194="        } else if (motor_state == motorState.FOLLOW) {" line195="" line196="        } else {" line197="            basic.pause(100)" line198="        }" line199="    })" line200="}" numlines="201"></mutation></block></statement></block></xml>