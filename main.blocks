<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="#F/Yd*Q)JfyX2n^TDEA-" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Y6E@3ZflhrKTi4+1;x2,"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace gdcMaqueen {" line1="" line2="    enum motorState {" line3="        STOP = 0," line4="        FORWARD = 1," line5="        BACKWARD = 2," line6="        LEFT = 3," line7="        RIGHT = 4" line8="    }" line9="" line10="    let stop_count = 0" line11="    let motor_speed = 0" line12="    let motor_state = motorState.STOP" line13="    let r_speed = 0" line14="    let l_speed = 0" line15="    let l_count = 0" line16="    let r_count = 0" line17="" line18="    //% block=&quot;open claw&quot;" line19="    export function open_claw() {" line20="        maqueen.servoRun(maqueen.Servos.S1, 60)" line21="    }" line22="    " line23="    //% block=&quot;close claw&quot;" line24="    export function close_claw() {" line25="        maqueen.servoRun(maqueen.Servos.S1, 10)" line26="    }" line27="" line28="    //% block=&quot;move backward at $speed for $rotations rotations&quot;" line29="    //% speed.defl=200" line30="    //% rotations.defl=1" line31="    export function backward(speed: number, rotations: number) {" line32="        r_count = 0" line33="        l_count = 0" line34="        l_speed = speed" line35="        r_speed = speed" line36="        motor_state = motorState.BACKWARD" line37="        motor_speed = speed" line38="        stop_count = rotations * 24" line39="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, speed)" line40="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, speed)" line41="    }" line42="" line43="    // Monitor right motor encoder" line44="    pins.onPulsed(DigitalPin.P1, PulseValue.High, function () {" line45="        if (motor_state &gt; motorState.STOP) {" line46="            r_count += 1" line47="        }" line48="    })" line49="" line50="    // Monitor left motor encoder" line51="    pins.onPulsed(DigitalPin.P0, PulseValue.High, function () {" line52="        if (motor_state &gt; motorState.STOP) {" line53="            l_count += 1" line54="        }" line55="    })" line56="" line57="    //% block=&quot;wait movement done&quot;" line58="    export function wait_movement_done() {" line59="        while (motor_state &gt; motorState.STOP) {" line60="            basic.pause(100)" line61="        }" line62="    }" line63="    " line64="    //% block=&quot;turn left at $speed for $rotations rotations&quot;" line65="    //% speed.defl=50" line66="    //% rotations.defl=1" line67="    export function turn_left(speed: number, rotations: number) {" line68="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, speed)" line69="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed)" line70="        stop_count = rotations * 24" line71="        motor_state = motorState.LEFT" line72="    }" line73="" line74="    //% block=&quot;move forward left at $speed for $rotations rotations&quot;" line75="    //% speed.defl=200" line76="    //% rotations.defl=1" line77="    export function forward(speed: number, rotations: number) {" line78="        r_count = 0" line79="        l_count = 0" line80="        l_speed = speed" line81="        r_speed = speed" line82="        motor_state = motorState.FORWARD" line83="        motor_speed = speed" line84="        stop_count = rotations * 24" line85="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed)" line86="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed)" line87="    }" line88="" line89="    //% block=&quot;turn right at $speed for $rotations rotations&quot;" line90="    //% speed.defl=50" line91="    //% rotations.defl=1" line92="    function turn_right(speed: number, rotations: number) {" line93="        maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed)" line94="        maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, speed)" line95="        stop_count = rotations * 24" line96="        motor_state = motorState.RIGHT" line97="    }" line98="" line99="    // background task to monitor and contrl motor movement" line100="    basic.forever(function () {" line101="        if (motor_state &gt; motorState.STOP &amp;&amp; motor_state &lt; motorState.LEFT) {" line102="            if (l_count &gt; r_count + 10) {" line103="                r_speed += 1" line104="                l_speed += -1" line105="                if (l_speed &lt; motor_speed - 20) {" line106="                    l_speed = motor_speed - 20" line107="                }" line108="                if (r_speed &gt; motor_speed + 20) {" line109="                    r_speed = motor_speed + 20" line110="                }" line111="            } else if (l_count &lt; r_count - 10) {" line112="                r_speed += -1" line113="                l_speed += 1" line114="                if (l_speed &gt; motor_speed + 20) {" line115="                    l_speed = motor_speed + 20" line116="                }" line117="                if (r_speed &lt; motor_speed - 20) {" line118="                    r_speed = motor_speed + 20" line119="                }" line120="            }" line121="            if (l_count &gt;= stop_count || r_count &gt;= stop_count) {" line122="                motor_state = motorState.STOP" line123="                motor_speed = 0" line124="                maqueen.motorStop(maqueen.Motors.All)" line125="            } else {" line126="                if (motor_state == motorState.FORWARD) {" line127="                    maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, l_speed)" line128="                    maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, r_speed)" line129="                } else if (motor_state == motorState.BACKWARD) {" line130="                    maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, l_speed)" line131="                    maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, r_speed)" line132="                }" line133="            }" line134="        } else if (motor_state == motorState.LEFT || motor_state == motorState.RIGHT) {" line135="            if (l_count &gt;= stop_count) {" line136="                maqueen.motorStop(maqueen.Motors.M1)" line137="            }" line138="            if (r_count &gt;= stop_count) {" line139="                maqueen.motorStop(maqueen.Motors.M2)" line140="            }" line141="            if (l_count &gt;= stop_count &amp;&amp; r_count &gt;= stop_count) {" line142="                motor_state = motorState.STOP" line143="            }" line144="        } else {" line145="            basic.pause(100)" line146="        }" line147="    })" line148="}" numlines="149"></mutation></block></statement></block></xml>